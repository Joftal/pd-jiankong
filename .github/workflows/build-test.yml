name: 开发测试构建

on:
  push:
    branches: [ Cookie ]
  pull_request:
    branches: [ Cookie ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test-and-build:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 设置UTF-8编码环境
      run: echo PYTHONIOENCODING=utf-8 >> $env:GITHUB_ENV
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install pyinstaller pytest
        
    - name: 运行基础测试
      shell: pwsh
      run: |
        Write-Output "🧪 开始运行基础测试..."
        
        # 测试Python模块导入
        python -c "import main; print('✅ main模块导入成功')"
        python -c "import database_manager; print('✅ database_manager模块导入成功')"
        python -c "import notification_manager; print('✅ notification_manager模块导入成功')"
        python -c "import panda_monitor; print('✅ panda_monitor模块导入成功')"
        python -c "import config; print('✅ config模块导入成功')"
        
        # 测试依赖库
        python -c "import flet; print('✅ Flet版本:', flet.__version__)"
        python -c "import requests; print('✅ Requests版本:', requests.__version__)"
        python -c "import plyer; print('✅ Plyer已安装')"
        python -c "import urllib3; print('✅ urllib3版本:', urllib3.__version__)"
        python -c "import certifi; print('✅ certifi已安装')"
        python -c "import charset_normalizer; print('✅ charset_normalizer已安装')"
        python -c "import idna; print('✅ idna版本:', idna.__version__)"
        
        Write-Output "🎉 所有基础测试通过！"
        
    - name: 清理构建环境
      run: |
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        if (Test-Path "*.spec") { Remove-Item -Force "*.spec" }
        
    - name: 构建可执行文件
      shell: pwsh
      run: |
        Write-Output "🔨 开始构建测试版本..."
        Write-Output "分支: ${{ github.ref_name }}"
        Write-Output "提交: ${{ github.sha }}"
        Write-Output ""
        python build_fixed.py
        
    - name: 验证构建结果
      shell: pwsh
      run: |
        if (Test-Path "dist\PD-Signal\PD-Signal.exe") {
          Write-Output "✅ 测试版可执行文件构建成功"
          $fileSize = (Get-Item "dist\PD-Signal\PD-Signal.exe").Length / 1MB
          Write-Output "文件大小: $([math]::Round($fileSize, 2)) MB"
          
          # 检查_internal文件夹是否存在
          if (Test-Path "dist\PD-Signal\_internal") {
            Write-Output "✅ _internal依赖文件夹存在"
            $internalSize = (Get-ChildItem "dist\PD-Signal\_internal" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
            Write-Output "_internal文件夹大小: $([math]::Round($internalSize, 2)) MB"
          } else {
            Write-Output "⚠️ _internal依赖文件夹不存在"
          }
          
          # 检查文件是否可执行
          $fileInfo = Get-Item "dist\PD-Signal\PD-Signal.exe"
          Write-Output "文件版本: $($fileInfo.VersionInfo.FileVersion)"
          Write-Output "创建时间: $($fileInfo.CreationTime)"
          Write-Output "修改时间: $($fileInfo.LastWriteTime)"
        } else {
          Write-Output "❌ 测试版可执行文件构建失败"
          exit 1
        }
        
    - name: 创建测试版发布包
      run: |
        # 创建发布目录
        $releaseDir = "release\PD-Signal-Test"
        if (Test-Path $releaseDir) { Remove-Item -Recurse -Force $releaseDir }
        New-Item -ItemType Directory $releaseDir
        
        # 复制整个PD-Signal目录（包含所有依赖）
        Copy-Item "dist\PD-Signal" "$releaseDir\" -Recurse
        
        # 复制使用说明
        Copy-Item "dist\使用说明.txt" "$releaseDir\" -ErrorAction SilentlyContinue
        
        # 复制源码和文档
        New-Item -ItemType Directory "$releaseDir\source"
        Copy-Item "*.py" "$releaseDir\source\"
        Copy-Item "requirements.txt" "$releaseDir\source\"
        Copy-Item "README_CN.md" "$releaseDir\source\"
        Copy-Item "project_overview.md" "$releaseDir\source\"
        
        # 创建测试说明
        $testInfo = "PD Signal - PandaLive监控工具 (测试版)`n版本: 测试版`n构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n构建环境: GitHub Actions Windows (测试)`nPython版本: ${{ env.PYTHON_VERSION }}`nGit提交: ${{ github.sha }}`n分支: ${{ github.ref_name }}`n`n🧪 测试说明:`n- 这是开发测试版本`n- 用于验证构建流程和基本功能`n- 可能包含未完成的功能或已知问题`n- 不建议在生产环境使用`n`n✅ 测试内容:`n- Python模块导入测试`n- 依赖库版本检查`n- 可执行文件构建测试`n- 文件完整性验证`n- _internal依赖文件夹检查`n`n📁 文件结构:`n- PD-Signal.exe (主程序)`n- _internal/ (所有依赖文件)`n- 使用说明.txt (使用说明)`n- source/ (源代码)`n`n💡 使用说明:`n1. 直接运行 PD-Signal.exe 启动程序`n2. 程序包含所有依赖，无需额外安装`n3. 已修复重复创建进程的问题`n4. 支持单实例运行，避免多开"
        $testInfo | Out-File -FilePath "$releaseDir\测试说明.txt" -Encoding UTF8
        
    - name: 上传测试版构建产物
      uses: actions/upload-artifact@v4
      with:
        name: PD-Signal-Test-${{ github.run_number }}
        path: |
          dist/
          release/PD-Signal-Test/
        retention-days: 7  # 测试版本只保留7天
        
    - name: 输出测试信息
      shell: pwsh
      run: |
        Write-Output "=========================================="
        Write-Output "🎉 测试构建完成！"
        Write-Output "=========================================="
        Write-Output "📁 构建产物:"
        Get-ChildItem "dist" | ForEach-Object {
          if ($_.PSIsContainer) {
            Write-Output "   - $($_.Name)/ (目录)"
            # 列出目录中的主要文件
            try {
              Get-ChildItem $_.FullName | ForEach-Object {
                if ($_.PSIsContainer) {
                  Write-Output "     - $($_.Name)/ (子目录)"
                } else {
                  $size = $_.Length / 1MB
                  Write-Output "     - $($_.Name) ($([math]::Round($size, 2)) MB)"
                }
              }
            } catch {
              Write-Output "     - (无法访问目录内容)"
            }
          } else {
            $size = $_.Length / 1MB
            Write-Output "   - $($_.Name) ($([math]::Round($size, 2)) MB)"
          }
        }
        Write-Output ""
        Write-Output "📦 测试版发布包:"
        Get-ChildItem "release\PD-Signal-Test" | ForEach-Object {
          Write-Output "   - $($_.Name)"
        }
        Write-Output ""
        Write-Output "🧪 测试内容:"
        Write-Output "   - Python模块导入测试"
        Write-Output "   - 依赖库版本检查"
        Write-Output "   - 可执行文件构建测试"
        Write-Output "   - 文件完整性验证"
        Write-Output ""
        Write-Output "💡 使用说明:"
        Write-Output "   1. 这是测试版本，用于验证构建流程"
        Write-Output "   2. 运行 PD-Signal/PD-Signal.exe 进行测试"
        Write-Output "   3. 程序包含所有依赖，无需额外安装"
        Write-Output "   4. 已修复重复创建进程的问题"
        Write-Output "   5. 查看 测试说明.txt 了解测试详情"
        Write-Output "=========================================="
