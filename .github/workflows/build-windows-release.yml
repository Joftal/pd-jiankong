name: Windows发布构建

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  BUILD_VERSION: ${{ github.ref_name || 'dev' }}

jobs:
  build-windows-release:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 设置UTF-8编码环境
      run: echo PYTHONIOENCODING=utf-8 >> $env:GITHUB_ENV
        
    - name: 缓存pip依赖
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 安装构建依赖
      run: |
        python -m pip install --upgrade pip wheel setuptools
        python -m pip install -r requirements.txt
        python -m pip install pyinstaller
        
    - name: 验证环境
      shell: pwsh
      run: |
        python --version
        python -c "import sys; print('Python路径:', sys.executable)"
        pyinstaller --version
        
    - name: 清理构建环境
      run: |
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        if (Test-Path "*.spec") { Remove-Item -Force "*.spec" }
        
    - name: 构建Windows可执行文件
      shell: pwsh
      run: |
        Write-Output "🔨 开始构建Windows发布版本..."
        Write-Output "版本: ${{ env.BUILD_VERSION }}"
        Write-Output "提交: ${{ github.sha }}"
        Write-Output ""
        python build_fixed.py
        
    - name: 验证构建结果
      shell: pwsh
      run: |
        if (Test-Path "dist\PD-Signal\PD-Signal.exe") {
          Write-Output "✅ Windows可执行文件构建成功"
          $fileSize = (Get-Item "dist\PD-Signal\PD-Signal.exe").Length / 1MB
          Write-Output "文件大小: $([math]::Round($fileSize, 2)) MB"
          
          # 检查_internal文件夹是否存在
          if (Test-Path "dist\PD-Signal\_internal") {
            Write-Output "✅ _internal依赖文件夹存在"
            $internalSize = (Get-ChildItem "dist\PD-Signal\_internal" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
            Write-Output "_internal文件夹大小: $([math]::Round($internalSize, 2)) MB"
          } else {
            Write-Output "⚠️ _internal依赖文件夹不存在"
          }
        } else {
          Write-Output "❌ Windows可执行文件构建失败"
          exit 1
        }
        
    - name: 创建发布包
      run: |
        # 创建发布目录
        $releaseDir = "release\PD-Signal-Windows"
        if (Test-Path $releaseDir) { Remove-Item -Recurse -Force $releaseDir }
        New-Item -ItemType Directory $releaseDir
        
        # 复制整个PD-Signal目录（包含所有依赖）
        Copy-Item "dist\PD-Signal" "$releaseDir\" -Recurse
        
        # 复制使用说明
        Copy-Item "dist\使用说明.txt" "$releaseDir\" -ErrorAction SilentlyContinue
        
        # 复制源码和文档
        New-Item -ItemType Directory "$releaseDir\source"
        Copy-Item "*.py" "$releaseDir\source\"
        Copy-Item "requirements.txt" "$releaseDir\source\"
        Copy-Item "README_CN.md" "$releaseDir\source\"
        Copy-Item "project_overview.md" "$releaseDir\source\"
        
        # 创建版本信息
        $versionInfo = "PD Signal - PandaLive监控工具`n版本: ${{ env.BUILD_VERSION }}`n构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n构建环境: GitHub Actions Windows`nPython版本: ${{ env.PYTHON_VERSION }}`nGit提交: ${{ github.sha }}`n`n📁 文件结构:`n- PD-Signal.exe (主程序)`n- _internal/ (所有依赖文件)`n- 使用说明.txt (使用说明)`n- source/ (源代码)`n`n💡 使用说明:`n1. 直接运行 PD-Signal.exe 启动程序`n2. 程序包含所有依赖，无需额外安装`n3. 已修复重复创建进程的问题`n4. 支持单实例运行，避免多开"
        $versionInfo | Out-File -FilePath "$releaseDir\版本信息.txt" -Encoding UTF8
        
    - name: 验证发布文件存在
      shell: pwsh
      run: |
        Write-Output "=== 验证发布文件 ==="
        $files = @(
          "dist\PD-Signal\PD-Signal.exe",
          "dist\使用说明.txt",
          "release\PD-Signal-Windows\版本信息.txt"
        )
        
        foreach ($file in $files) {
          if (Test-Path $file) {
            $size = (Get-Item $file).Length / 1KB
            Write-Output "✅ $file 存在 ($([math]::Round($size, 2)) KB)"
          } else {
            Write-Output "❌ $file 不存在"
            exit 1
          }
        }
        
    - name: 创建GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/PD-Signal/PD-Signal.exe
          dist/使用说明.txt
          release/PD-Signal-Windows/版本信息.txt
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## PD Signal v${{ github.ref_name }}
          
          ### 📥 下载说明
          - **Windows用户**: 下载 `PD-Signal.exe` 直接运行
          - 详细说明请查看 `使用说明.txt`
          
          ### 🎯 功能特点
          - ✅ 多主播监控
          - ✅ 实时通知
          - ✅ Windows系统通知
          - ✅ 现代化GUI界面
          - ✅ 数据持久化存储
          - ✅ 配置自动保存
          
          ### 📋 使用说明
          详细使用说明请查看 `使用说明.txt` 文件。
          
          ### 🔧 构建信息
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交: ${{ github.sha }}
          - 版本: ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 输出构建信息
      shell: pwsh
      run: |
        Write-Output "=========================================="
        Write-Output "🎉 Windows发布构建完成！"
        Write-Output "=========================================="
        Write-Output "📁 构建产物:"
        Get-ChildItem "dist" | ForEach-Object {
          $size = $_.Length / 1MB
          Write-Output "   - $($_.Name) ($([math]::Round($size, 2)) MB)"
        }
        Write-Output ""
        Write-Output "📦 发布包:"
        Get-ChildItem "release\PD-Signal-Windows" | ForEach-Object {
          Write-Output "   - $($_.Name)"
        }
        Write-Output ""
        Write-Output "💡 使用说明:"
        Write-Output "   1. 下载 PD-Signal.exe 运行程序"
        Write-Output "   2. 阅读 使用说明.txt 了解详细用法"
        Write-Output "=========================================="
